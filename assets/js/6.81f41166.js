(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{385:function(t,s,a){t.exports=a.p+"assets/img/dataType.ab4b76bb.png"},394:function(t,s,a){"use strict";a.r(s);var n=a(29),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),n("p",[n("img",{attrs:{src:a(385),alt:"数据类型"}})]),t._v(" "),n("h2",{attrs:{id:"定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),n("h3",{attrs:{id:"什么是数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是数据类型"}},[t._v("#")]),t._v(" 什么是数据类型？")]),t._v(" "),n("p",[n("strong",[t._v("数据类型，就是将数据按照某一规则进行区别时所定义的分类标签。比如说，同样都是汉字组成的词语，要分动词、名词、介词等。")])]),t._v(" "),n("h3",{attrs:{id:"为什么会有数据类型-它出现的意义是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么会有数据类型-它出现的意义是什么"}},[t._v("#")]),t._v(" 为什么会有数据类型？它出现的意义是什么？")]),t._v(" "),n("p",[t._v("对数据分类，主要有两个原因：")]),t._v(" "),n("p",[t._v("第一，"),n("strong",[t._v("为了限制不同种类数据的操作")]),t._v("。比如说当你声明一个变量是一个数字，那么，就只能对这个变量进行数字能进行的操作，这在编译代码及排查错误时尤为重要。")]),t._v(" "),n("p",[t._v("第二，由于所有的数据都要存储在计算机中，不同类型数据的存储位置及所需要的内存大小也不一样，而对数据分类后，编程时需要用大数据的时候才需要申请大内存，这样可以充分利用内存。")]),t._v(" "),n("p",[t._v("例如大胖子必须睡双人床，就给他双人床，瘦的人单人床就够了。")]),t._v(" "),n("h2",{attrs:{id:"javascript-中的数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript-中的数据类型"}},[t._v("#")]),t._v(" JavaScript 中的数据类型")]),t._v(" "),n("h3",{attrs:{id:"为什么称-javascript-为弱类型语言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么称-javascript-为弱类型语言"}},[t._v("#")]),t._v(" 为什么称 JavaScript 为弱类型语言？")]),t._v(" "),n("p",[t._v("JavaScript 中变量是没有类型的，只有值才有。变量可以随时持有任何类型的值。")]),t._v(" "),n("p",[t._v("举个例子：")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// js")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'4'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("在上面的例子中，我们声明 "),n("code",[t._v("a")]),t._v(" 是一个数字，但是我们在之后将 "),n("code",[t._v("a")]),t._v("  的值又改成了字符串和布尔值（后面会讲这些类型）。可以看到，变量 "),n("code",[t._v("a")]),t._v(" 的类型是可以随意转变的，这在强类型语言里是不允许的。")]),t._v(" "),n("p",[t._v("因此，判断一门语言是强类型还是弱类型，就看这门语言中"),n("strong",[t._v("一个变量是否可以赋不同数据类型的值。")])]),t._v(" "),n("h3",{attrs:{id:"javascript-有哪些数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript-有哪些数据类型"}},[t._v("#")]),t._v(" JavaScript 有哪些数据类型？")]),t._v(" "),n("p",[t._v("在 JavaScript 中，共有七种数据类型，其中，六种是基本/原始类型，一种是对象/复合/引用类型。")]),t._v(" "),n("h4",{attrs:{id:"基本类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本类型"}},[t._v("#")]),t._v(" 基本类型:")]),t._v(" "),n("ul",[n("li",[t._v("字符串(String)：表示一个字符串，如“find”。")]),t._v(" "),n("li",[t._v("数字(Number)：表示一个数字，如 45 。")]),t._v(" "),n("li",[t._v("布尔(Boolean)：布尔值，包括 false 和 true 。")]),t._v(" "),n("li",[t._v("未定义（undefined）：只有一个值，undefined , 表示未给变量赋值。")]),t._v(" "),n("li",[t._v("空值（null）：只有一个值， null , 表示空值得关键字。")]),t._v(" "),n("li",[t._v("Symbol(es6新增)：表示一个唯一且不可改变的值。")])]),t._v(" "),n("h4",{attrs:{id:"引用类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引用类型"}},[t._v("#")]),t._v(" 引用类型：")]),t._v(" "),n("ul",[n("li",[t._v("对象(object): 各种值组成的集合。")])]),t._v(" "),n("p",[t._v("其中，对象类型还有一些子类型，如数组，函数，JavaScript 的内建函数等。")]),t._v(" "),n("h3",{attrs:{id:"基本数据类型和复合数据类型有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型和复合数据类型有什么区别"}},[t._v("#")]),t._v(" 基本数据类型和复合数据类型有什么区别？")]),t._v(" "),n("p",[t._v("主要有两点：")]),t._v(" "),n("ol",[n("li",[n("p",[n("strong",[t._v("基本类型的数据是不可再拆分的。")]),t._v(" 这也就是为什么称他为"),n("strong",[t._v("基本类型")]),t._v("，就像组成单词的 26 个英文字母、组成数字的 0 -9；而复合类型的数据，是由基本类型组成。比如一个单词，可以由数个字母组成，一个句子，可以由数字、字母及标点复合组成。")])]),t._v(" "),n("li",[n("p",[t._v("它们在计算机中的存储方式不同。计算机存储数据时为了内存及运行速度考虑，往往会对存储做优化，有的会将值本身存储在栈内存中，也有可能会在栈内存中存储一个值的引用，而把值本身存在堆内存中。对于不同的语言，实现起来或许会有不一致，但思想都是如此。")])])]),t._v(" "),n("h3",{attrs:{id:"js-中值类型和引用类型的存储方式是怎样的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js-中值类型和引用类型的存储方式是怎样的"}},[t._v("#")]),t._v(" js 中值类型和引用类型的存储方式是怎样的？")]),t._v(" "),n("p",[t._v("对于 js 来讲，是没有栈内存的概念的，但是 js 在编译执行代码时，会首先进入一个执行上下文，在执行上下文的创建阶段，会开辟一片区域，用来存储变量和它们的值，这个区域就叫做变量对象。")]),t._v(" "),n("p",[t._v("大概长这个样子：")]),t._v(" "),n("p",[n("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/599584-cce8e155e19593fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),t._v(" "),n("p",[t._v("如上图所示，对于基本类型的变量，他们的变量名和值都会存储在这个变量对象中，而对于 d ,这个引用类型的值，则只是将这个变量的名字和地址存在变量对象中，变量的值是存储在堆内存空间的。")]),t._v(" "),n("p",[t._v("关于执行上下文，后面会有文章专门讲，暂时先不做深入讲解。")]),t._v(" "),n("h3",{attrs:{id:"如何判断一个数据的数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个数据的数据类型"}},[t._v("#")]),t._v(" 如何判断一个数据的数据类型？")]),t._v(" "),n("h4",{attrs:{id:"typeof-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typeof-方法"}},[t._v("#")]),t._v(" - typeof 方法")]),t._v(" "),n("p",[t._v("对于一个变量，使用 "),n("code",[t._v("typeof")]),t._v(" 方法会返回一个唯一的数据类型字符串。但这个方法并不怎么靠谱。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("值")]),t._v(" "),n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("typeof 值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("23")]),t._v(" "),n("td",[t._v("number")]),t._v(" "),n("td",[t._v('"number"')])]),t._v(" "),n("tr",[n("td",[t._v('"abc"')]),t._v(" "),n("td",[t._v("string")]),t._v(" "),n("td",[t._v('"string"')])]),t._v(" "),n("tr",[n("td",[t._v("false")]),t._v(" "),n("td",[t._v("boolean")]),t._v(" "),n("td",[t._v('"boolean"')])]),t._v(" "),n("tr",[n("td",[t._v("undefined")]),t._v(" "),n("td",[t._v("undefined")]),t._v(" "),n("td",[t._v('"undefined"')])]),t._v(" "),n("tr",[n("td",[t._v("Symbol()")]),t._v(" "),n("td",[t._v("symbol")]),t._v(" "),n("td",[t._v('"symbol"')])]),t._v(" "),n("tr",[n("td",[t._v("{}")]),t._v(" "),n("td",[t._v("object")]),t._v(" "),n("td",[t._v('"object"')])]),t._v(" "),n("tr",[n("td",[t._v("null")]),t._v(" "),n("td",[t._v("null")]),t._v(" "),n("td",[t._v('"object"')])]),t._v(" "),n("tr",[n("td",[t._v("function(){}")]),t._v(" "),n("td",[t._v("object")]),t._v(" "),n("td",[t._v('"funciton"')])])])]),t._v(" "),n("p",[t._v("从上表中我们看到，有两处地方和我们预期不一致。")]),t._v(" "),n("ol",[n("li",[n("p",[n("code",[t._v("typeof null")]),t._v(" 返回的是 "),n("code",[t._v('"object"')]),t._v(" 而不是 "),n("code",[t._v('"null"')]),t._v("。这是 js 语言设计时的一个 bug, 并且在未来也不会更改。")]),t._v(" "),n("p",[t._v("想要正确判断 null 可以加一个条件：")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("typeOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null 是唯一一种布尔值为 false 的对象 ")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"null"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("typeOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "object"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("typeOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "null"')]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])])]),t._v(" "),n("li",[n("p",[n("code",[t._v('typeof function(){} === "function"')]),t._v(", 这是因为"),n("code",[t._v("function")]),t._v(" 作为 js 的一等公民，是可以调用的对象，设计者认为有必要将它和普通对象区别开来。")])])]),t._v(" "),n("h4",{attrs:{id:"object-prototype-tostring-call-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring-call-方法"}},[t._v("#")]),t._v(" - Object.prototype.toString.call() 方法")]),t._v(" "),n("p",[t._v("除了 "),n("code",[t._v("typeof")]),t._v(" 方法外，调用 "),n("code",[t._v("Object.prototype.toString.call()")]),t._v(" 方法 也可以返回一个包含数据类型的字符串，并且更为准确。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("值")]),t._v(" "),n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("Object.prototype.toString.call(值)")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("23")]),t._v(" "),n("td",[t._v("number")]),t._v(" "),n("td",[t._v("'[object Number]'")])]),t._v(" "),n("tr",[n("td",[t._v('"abc"')]),t._v(" "),n("td",[t._v("string")]),t._v(" "),n("td",[t._v("'[object String]'")])]),t._v(" "),n("tr",[n("td",[t._v("false")]),t._v(" "),n("td",[t._v("boolean")]),t._v(" "),n("td",[t._v("'[object Boolean]'")])]),t._v(" "),n("tr",[n("td",[t._v("undefined")]),t._v(" "),n("td",[t._v("undefined")]),t._v(" "),n("td",[t._v("'[object Undefined]'")])]),t._v(" "),n("tr",[n("td",[t._v("Symbol()")]),t._v(" "),n("td",[t._v("symbol")]),t._v(" "),n("td",[t._v("'[object Symbol]'")])]),t._v(" "),n("tr",[n("td",[t._v("{}")]),t._v(" "),n("td",[t._v("object")]),t._v(" "),n("td",[t._v("'[object Object]'")])]),t._v(" "),n("tr",[n("td",[t._v("null")]),t._v(" "),n("td",[t._v("null")]),t._v(" "),n("td",[t._v("'[object Null]'")])]),t._v(" "),n("tr",[n("td",[t._v("function(){}")]),t._v(" "),n("td",[t._v("object")]),t._v(" "),n("td",[t._v("'[object Function]'")])]),t._v(" "),n("tr",[n("td",[t._v("[]")]),t._v(" "),n("td",[t._v("object")]),t._v(" "),n("td",[t._v("'[object Array]'")])])])]),t._v(" "),n("p",[t._v("从上面们可以看出，这方法对于类型的检测更加精确。")]),t._v(" "),n("p",[t._v("因此，我们可以写一个函数，用来精确检测类型。")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\[object (.*)\\]$")]),n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Null";')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);